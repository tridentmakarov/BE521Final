function output = AllSteps(ecog_train, dg_train, ecog_test, show_plots, post_process, set, pc, testing)
	%% Step 1: Get features

	[features_train,features_test] = Step1GetFeatures(ecog_train, ecog_test, set, pc, testing);

	%% Step 2: Decimate

	[Y, fingerFeats] = Step2Decimation(dg_train);

	%% Step 3: Linear regression

	datasets = {features_train, features_test};
	[Y_out] = Step3LinearRegression(datasets);

	%% Step 4: Interpolation
	% Run through each finger
	disp('Interpolating the finger positions')
	for i = 1:5
		y = Y_out(:, i); % Get y value of finger
		x = 1:length(y); % Get x values of finger
		xq = (1:(0.050*1000*(length(y)+3)))/(0.05*1000);
		sp(i, :) = spline(x,y,xq); % Spline

		%% Post-process
		if post_process == true
			sp(i, :) = calcMovement(sp(i, :), fingerFeats);
			windowSize = 400;
			b = (1/windowSize)*ones(1,windowSize);
			a = 1;
			plot(sp(i, :))
			hold on
			sp(i, :) = filtfilt(b,a,sp(i, :));
			plot(sp(i, :))
			legend('unfiltered, filtered')
			hold off
		end
		if testing == true
			c(i) = corr(sp(i, :)', dg_train(1:length(sp(i, :)), i));
		end 
		%% Plot
		if show_plots == true % Run if testing

			figure()
			hold on
			plot(sp(i, :))
			plot(dg_train(1:length(sp(i, :)), i), '--');
			legend('calculated', 'actual')
			hold off
		end
	end
	if testing == false
	   predicted_dg = sp(:, 1:size(ecog_test, 1))';
	   output = predicted_dg;
	else
		output = mean(c);
	end
end


